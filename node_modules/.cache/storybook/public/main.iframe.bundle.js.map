{"version":3,"file":"main.iframe.bundle.js","sources":["webpack:///./.storybook/preview.js","webpack:///./.storybook/preview.js-generated-config-entry.js","webpack:///./.storybook/vector-icons.js","webpack:///\\.)(","webpack:///./components/BottomSheet/BottomSheet.stories.tsx","webpack:///./components/BottomSheet/BottomSheet.tsx","webpack:///./generated-stories-entry.js","webpack:///./storybook-init-framework-entry.js","webpack:///./util.inspect (ignored)"],"sourcesContent":["import './vector-icons';\n\nexport const parameters = {\n  actions: {argTypesRegex: '^on[A-Z].*'},\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n  docs: {\n    source: {excludeDecorators: true},\n  },\n};\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/no-unresolved */\nimport { addDecorator, addParameters, addLoader, addArgsEnhancer, addArgTypesEnhancer, setGlobalRender } from '/Users/edwardw/Desktop/EdDaWord.github.io/node_modules/@storybook/client-api';\nimport { logger } from '/Users/edwardw/Desktop/EdDaWord.github.io/node_modules/@storybook/client-logger';\nimport * as config from '/Users/edwardw/Desktop/EdDaWord.github.io/.storybook/preview.js';\nObject.keys(config).forEach(function (key) {\n  var value = config[key];\n\n  switch (key) {\n    case 'args':\n    case 'argTypes':\n      {\n        return logger.warn('Invalid args/argTypes in config, ignoring.', JSON.stringify(value));\n      }\n\n    case 'decorators':\n      {\n        return value.forEach(function (decorator) {\n          return addDecorator(decorator, false);\n        });\n      }\n\n    case 'loaders':\n      {\n        return value.forEach(function (loader) {\n          return addLoader(loader, false);\n        });\n      }\n\n    case 'parameters':\n      {\n        return addParameters(_objectSpread({}, value), false);\n      }\n\n    case 'argTypesEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgTypesEnhancer(enhancer);\n        });\n      }\n\n    case 'argsEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgsEnhancer(enhancer);\n        });\n      }\n\n    case 'render':\n      {\n        return setGlobalRender(value);\n      }\n\n    case 'globals':\n    case 'globalTypes':\n      {\n        var v = {};\n        v[key] = value;\n        return addParameters(v, false);\n      }\n\n    case 'decorateStory':\n    case 'renderToDOM':\n      {\n        return null; // This key is not handled directly in v6 mode.\n      }\n\n    default:\n      {\n        // eslint-disable-next-line prefer-template\n        return console.log(key + ' was not supported :( !');\n      }\n  }\n});","// Generate required css for vector-icons\nimport AntDesign from 'react-native-vector-icons/Fonts/AntDesign.ttf';\nimport Entypo from 'react-native-vector-icons/Fonts/Entypo.ttf';\nimport EvilIcons from 'react-native-vector-icons/Fonts/EvilIcons.ttf';\nimport Feather from 'react-native-vector-icons/Fonts/Feather.ttf';\nimport FontAwesome from 'react-native-vector-icons/Fonts/FontAwesome.ttf';\nimport FontAwesome5_Brands from 'react-native-vector-icons/Fonts/FontAwesome5_Brands.ttf';\nimport FontAwesome5_Regular from 'react-native-vector-icons/Fonts/FontAwesome5_Regular.ttf';\nimport FontAwesome5_Solid from 'react-native-vector-icons/Fonts/FontAwesome5_Solid.ttf';\nimport Foundation from 'react-native-vector-icons/Fonts/Foundation.ttf';\nimport Ionicons from 'react-native-vector-icons/Fonts/Ionicons.ttf';\nimport MaterialIcons from 'react-native-vector-icons/Fonts/MaterialIcons.ttf';\nimport MaterialCommunityIcons from 'react-native-vector-icons/Fonts/MaterialCommunityIcons.ttf';\nimport SimpleLineIcons from 'react-native-vector-icons/Fonts/SimpleLineIcons.ttf';\nimport Octicons from 'react-native-vector-icons/Fonts/Octicons.ttf';\nimport Zocial from 'react-native-vector-icons/Fonts/Zocial.ttf';\nimport Fontisto from 'react-native-vector-icons/Fonts/Fontisto.ttf';\n\nconst fonts = {\n  AntDesign,\n  Entypo,\n  EvilIcons,\n  Feather,\n  FontAwesome,\n  FontAwesome5_Brands,\n  FontAwesome5_Regular,\n  FontAwesome5_Solid,\n  Foundation,\n  Ionicons,\n  MaterialIcons,\n  MaterialCommunityIcons,\n  SimpleLineIcons,\n  Octicons,\n  Zocial,\n  Fontisto,\n};\n\nconst iconFontStyles = Object.entries(fonts).reduce(\n  (prev, [fontName, font]) => {\n    return `${prev}\n  @font-face {\n    src: url(${font});\n    font-family: ${fontName};\n  }`;\n  },\n  '',\n);\n\nconst style = document.createElement('style');\nstyle.type = 'text/css';\nif (style.styleSheet) {\n  style.styleSheet.cssText = iconFontStyles;\n} else {\n  style.appendChild(document.createTextNode(iconFontStyles));\n}\n\n// Inject stylesheet\ndocument.head.appendChild(style);\n","var map = {\n\t\"./BottomSheet/BottomSheet.stories.tsx\": \"./components/BottomSheet/BottomSheet.stories.tsx\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./components sync recursive ^\\\\.(?:(?:^|\\\\/|(?:(?:(?!(?:^|\\\\/)\\\\.).)*?)\\\\/)(?!\\\\.)(?=.)[^/]*?\\\\.stories\\\\.(js|jsx|ts|tsx|mdx))$\";","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from \\\"react\\\";\\nimport { Button, Dimensions, StyleSheet, Text, View } from \\\"react-native\\\";\\nimport LinearGradient from \\\"react-native-web-linear-gradient\\\";\\nimport { ComponentMeta } from \\\"@storybook/react\\\";\\nimport { NativeBaseProvider } from \\\"native-base\\\";\\n\\nimport { BottomSheet } from \\\"./BottomSheet\\\";\\n\\nconst PrimaryColor = \\\"#eb1600\\\";\\n\\nexport default {\\n  title: \\\"BottomSheet\\\",\\n  component: BottomSheet,\\n};\\n\\nexport const Default = () => {\\n  const [isSheetShown, setIsSheetShown] = useState(false);\\n  const [isDebugInfoShown, setIsDebugInfoShown] = useState(false);\\n  const { width: windowWidth } = Dimensions.get(\\\"window\\\");\\n\\n  const handleToggleBottomSheet = () => {\\n    setIsSheetShown(!isSheetShown);\\n  };\\n\\n  // TODO: implement Debug Info\\n  const handleToggleDebugInfo = () => {\\n    setIsDebugInfoShown(!isDebugInfoShown);\\n  };\\n\\n  const bottomSheetToggles = () => {\\n    return (\\n      <View style={styles.togglesContainer}>\\n        <Button\\n          color={PrimaryColor}\\n          onPress={handleToggleBottomSheet}\\n          title=\\\"Toggle BottomSheet\\\"\\n        />\\n        <View style={styles.divider} />\\n        <Button\\n          color={PrimaryColor}\\n          onPress={handleToggleDebugInfo}\\n          title=\\\"Toggle Debug Information\\\"\\n        />\\n      </View>\\n    );\\n  };\\n\\n  const content = () => {\\n    return (\\n      <LinearGradient\\n        colors={[\\\"#e56465\\\", \\\"#9296e2\\\"]}\\n        style={styles.gradientContent}\\n      >\\n        <Text style={styles.contentText}>\\n          The user of this component can put whatever content they want in here,\\n          and it should be scrollable (without causing the sheet to pull up or\\n          down)!\\n        </Text>\\n      </LinearGradient>\\n    );\\n  };\\n\\n  return (\\n    <NativeBaseProvider>\\n      <Text style={styles.title}>Building a `BottomSheet` Component</Text>\\n      <Text style={styles.subTitle}>\\n        Click below to show the BottomSheet and play with it's behavior!\\n      </Text>\\n      {bottomSheetToggles()}\\n      {isSheetShown ? (\\n        <BottomSheet\\n          content={content}\\n          isWideScreen={windowWidth > 600}\\n          subtitle=\\\"Some more information here\\\"\\n          title=\\\"My Custom Title\\\"\\n        />\\n      ) : null}\\n    </NativeBaseProvider>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  title: {\\n    fontSize: 36,\\n    paddingBottom: 8,\\n  },\\n  subTitle: {\\n    fontSize: 16,\\n    paddingBottom: 24,\\n  },\\n  togglesContainer: {\\n    maxWidth: 300,\\n  },\\n  divider: {\\n    height: \\\"1rem\\\",\\n  },\\n  gradientContent: {\\n    height: 900,\\n    width: \\\"100%\\\",\\n    backgroundColor: PrimaryColor,\\n  },\\n  contentText: {\\n    textAlign: \\\"center\\\",\\n    margin: 10,\\n    color: \\\"#ffffff\\\",\\n    backgroundColor: \\\"transparent\\\",\\n  },\\n});\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":16},\"endLoc\":{\"col\":1,\"line\":80},\"startBody\":{\"col\":23,\"line\":16},\"endBody\":{\"col\":1,\"line\":80}}};\n    \nimport React, { useState } from \"react\";\nimport { Button, Dimensions, StyleSheet, Text, View } from \"react-native\";\nimport LinearGradient from \"react-native-web-linear-gradient\";\nimport { ComponentMeta } from \"@storybook/react\";\nimport { NativeBaseProvider } from \"native-base\";\n\nimport { BottomSheet } from \"./BottomSheet\";\n\nconst PrimaryColor = \"#eb1600\";\n\nexport default {\n  title: \"BottomSheet\",\n  component: BottomSheet,\n};\n\nexport const Default = () => {\n  const [isSheetShown, setIsSheetShown] = useState(false);\n  const [isDebugInfoShown, setIsDebugInfoShown] = useState(false);\n  const { width: windowWidth } = Dimensions.get(\"window\");\n\n  const handleToggleBottomSheet = () => {\n    setIsSheetShown(!isSheetShown);\n  };\n\n  // TODO: implement Debug Info\n  const handleToggleDebugInfo = () => {\n    setIsDebugInfoShown(!isDebugInfoShown);\n  };\n\n  const bottomSheetToggles = () => {\n    return (\n      <View style={styles.togglesContainer}>\n        <Button\n          color={PrimaryColor}\n          onPress={handleToggleBottomSheet}\n          title=\"Toggle BottomSheet\"\n        />\n        <View style={styles.divider} />\n        <Button\n          color={PrimaryColor}\n          onPress={handleToggleDebugInfo}\n          title=\"Toggle Debug Information\"\n        />\n      </View>\n    );\n  };\n\n  const content = () => {\n    return (\n      <LinearGradient\n        colors={[\"#e56465\", \"#9296e2\"]}\n        style={styles.gradientContent}\n      >\n        <Text style={styles.contentText}>\n          The user of this component can put whatever content they want in here,\n          and it should be scrollable (without causing the sheet to pull up or\n          down)!\n        </Text>\n      </LinearGradient>\n    );\n  };\n\n  return (\n    <NativeBaseProvider>\n      <Text style={styles.title}>Building a `BottomSheet` Component</Text>\n      <Text style={styles.subTitle}>\n        Click below to show the BottomSheet and play with it's behavior!\n      </Text>\n      {bottomSheetToggles()}\n      {isSheetShown ? (\n        <BottomSheet\n          content={content}\n          isWideScreen={windowWidth > 600}\n          subtitle=\"Some more information here\"\n          title=\"My Custom Title\"\n        />\n      ) : null}\n    </NativeBaseProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  title: {\n    fontSize: 36,\n    paddingBottom: 8,\n  },\n  subTitle: {\n    fontSize: 16,\n    paddingBottom: 24,\n  },\n  togglesContainer: {\n    maxWidth: 300,\n  },\n  divider: {\n    height: \"1rem\",\n  },\n  gradientContent: {\n    height: 900,\n    width: \"100%\",\n    backgroundColor: PrimaryColor,\n  },\n  contentText: {\n    textAlign: \"center\",\n    margin: 10,\n    color: \"#ffffff\",\n    backgroundColor: \"transparent\",\n  },\n});\n\n\n\nDefault.parameters = { storySource: { source: \"() => {\\n  const [isSheetShown, setIsSheetShown] = useState(false);\\n  const [isDebugInfoShown, setIsDebugInfoShown] = useState(false);\\n  const { width: windowWidth } = Dimensions.get(\\\"window\\\");\\n\\n  const handleToggleBottomSheet = () => {\\n    setIsSheetShown(!isSheetShown);\\n  };\\n\\n  // TODO: implement Debug Info\\n  const handleToggleDebugInfo = () => {\\n    setIsDebugInfoShown(!isDebugInfoShown);\\n  };\\n\\n  const bottomSheetToggles = () => {\\n    return (\\n      <View style={styles.togglesContainer}>\\n        <Button\\n          color={PrimaryColor}\\n          onPress={handleToggleBottomSheet}\\n          title=\\\"Toggle BottomSheet\\\"\\n        />\\n        <View style={styles.divider} />\\n        <Button\\n          color={PrimaryColor}\\n          onPress={handleToggleDebugInfo}\\n          title=\\\"Toggle Debug Information\\\"\\n        />\\n      </View>\\n    );\\n  };\\n\\n  const content = () => {\\n    return (\\n      <LinearGradient\\n        colors={[\\\"#e56465\\\", \\\"#9296e2\\\"]}\\n        style={styles.gradientContent}\\n      >\\n        <Text style={styles.contentText}>\\n          The user of this component can put whatever content they want in here,\\n          and it should be scrollable (without causing the sheet to pull up or\\n          down)!\\n        </Text>\\n      </LinearGradient>\\n    );\\n  };\\n\\n  return (\\n    <NativeBaseProvider>\\n      <Text style={styles.title}>Building a `BottomSheet` Component</Text>\\n      <Text style={styles.subTitle}>\\n        Click below to show the BottomSheet and play with it's behavior!\\n      </Text>\\n      {bottomSheetToggles()}\\n      {isSheetShown ? (\\n        <BottomSheet\\n          content={content}\\n          isWideScreen={windowWidth > 600}\\n          subtitle=\\\"Some more information here\\\"\\n          title=\\\"My Custom Title\\\"\\n        />\\n      ) : null}\\n    </NativeBaseProvider>\\n  );\\n}\" }, ...Default.parameters };","import React, { useState } from \"react\";\nimport { Button, StyleSheet, Text, View } from \"react-native\";\n\ntype Props = {\n  content: () => React.Node;\n  subtitle: string;\n  isWideScreen: boolean;\n  title: string;\n};\n\nexport const BottomSheet = ({\n  content = () => {},\n  subtitle,\n  isWideScreen = true,\n  title,\n}: Props) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const renderNarrow = () => {\n    return (\n      <View>\n        Narrow\n        <View>\n          <Text>{title}</Text>\n          <Text>{subtitle}</Text>\n        </View>\n        {content()}\n      </View>\n    );\n  };\n\n  const renderWide = () => {\n    return (\n      <View>\n        Wide\n        <View>\n          <Text>{title}</Text>\n          <Text>{subtitle}</Text>\n        </View>\n        {content()}\n      </View>\n    );\n  };\n\n  return <View>{isWideScreen ? renderWide() : renderNarrow()}</View>;\n};\n\nconst styles = StyleSheet.create((theme) => ({\n  root: {\n    minHeight: 200,\n  },\n}));\n\n// TODO: use an SVG / Make this a TouchableHighlight\n// TODO: separate to it's own component\nconst CloseButton = () => {\n  const onPress = () => console.log(\"CLOSE ME\");\n\n  return <Button onPress={onPress} title=\"X\" />;\n};\n","\"use strict\";\n\nvar _frameworkImportPath = require(\"@storybook/react\");\n\n/* eslint-disable import/no-unresolved */\n(0, _frameworkImportPath.configure)([require.context('./components', true, /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.(js|jsx|ts|tsx|mdx))$/)], module, false);","import '@storybook/react';","/* (ignored) */"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;ACOA;;;;;;;;;;;;ACNA;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;;;;;;;;;;;;ACRA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}