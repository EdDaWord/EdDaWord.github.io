"use strict";
/**
 * @fileoverview A story file must contain at least one story export
 * @author Yann Braga
 */
const csf_1 = require("@storybook/csf");
const create_storybook_rule_1 = require("../utils/create-storybook-rule");
const constants_1 = require("../utils/constants");
const utils_1 = require("../utils");
const ast_1 = require("../utils/ast");
module.exports = (0, create_storybook_rule_1.createStorybookRule)({
    name: 'story-exports',
    defaultOptions: [],
    meta: {
        type: 'problem',
        docs: {
            description: 'A story file must contain at least one story export',
            categories: [constants_1.CategoryId.RECOMMENDED, constants_1.CategoryId.CSF],
            recommended: 'error',
        },
        messages: {
            shouldHaveStoryExport: 'The file should have at least one story export',
            addStoryExport: 'Add a story export',
        },
        fixable: null,
        schema: [],
    },
    create(context) {
        // variables should be defined here
        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------
        const isValidStoryExport = (node) => (0, csf_1.isExportStory)(node.name, nonStoryExportsConfig) && node.name !== '__namedExportsOrder';
        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------
        let hasStoriesOfImport = false;
        let nonStoryExportsConfig = {};
        let meta;
        let namedExports = [];
        return {
            ImportSpecifier(node) {
                if (node.imported.name === 'storiesOf') {
                    hasStoriesOfImport = true;
                }
            },
            ExportDefaultDeclaration: function (node) {
                meta = (0, utils_1.getMetaObjectExpression)(node, context);
                if (meta) {
                    nonStoryExportsConfig = {
                        excludeStories: (0, utils_1.getDescriptor)(meta, 'excludeStories'),
                        includeStories: (0, utils_1.getDescriptor)(meta, 'includeStories'),
                    };
                }
            },
            ExportNamedDeclaration: function (node) {
                // if there are specifiers, node.declaration should be null
                if (!node.declaration)
                    return;
                const decl = node.declaration;
                if ((0, ast_1.isVariableDeclaration)(decl)) {
                    const { id } = decl.declarations[0];
                    if ((0, ast_1.isIdentifier)(id)) {
                        namedExports.push(id);
                    }
                }
            },
            'Program:exit': function (node) {
                if (hasStoriesOfImport || !meta) {
                    return;
                }
                const storyExports = namedExports.filter(isValidStoryExport);
                if (storyExports.length) {
                    return;
                }
                // @TODO: bring apply this autofix with CSF3 release
                // const fix = (fixer) => fixer.insertTextAfter(node, `\n\nexport const Default = {}`)
                context.report({
                    node,
                    messageId: 'shouldHaveStoryExport',
                    // fix,
                });
            },
        };
    },
});
